@startuml
hide circle
skinparam classAttributeIconSize 0
skinparam backgroundColor White
skinparam RoundCorner 10
skinparam Shadowing true

skinparam class {
    ArrowColor DarkBlue
    BackgroundColor LightBlue
    BorderColor DarkBlue
}

skinparam note {
    BackgroundColor LightYellow
    BorderColor DarkBlue
}

title Diagrama de clase general

class Interpretador {
    + obtenerBloqueEspecialPorId(String : bloqueID) : Bloques
    + esBloqueEspecial(String : bloqueId) :  boolean
    + obtenerBotonEspecialPorId(String : bloqueId, Algoritmo : algoritmo, SectorBloquesDisponiblesVisata sectorBloques) : BotonBloqueEspecial
    + agregarBloqueSimpleAlAlgoritmo(String : bloqueId, Algoritmo : algoritmo) : BotonBloqueSimple
    + agregarBloqueSimpleAlBloqueEspecial(String : bloqueId, Bloques : esBloqueEspecial) : BotonBloqueSimple

}

class FabricaDeBloques {
    - Estado : estado
    + crearBloqueMovimientoArriba() : BloqueMovimiento
    + crearBloqueMovimientoAbajo() : BloqueMovimiento
    + crearBloqueMovimientoIzquierda() : BloqueMovimiento
    + crearBloqueMovimientoDerecha() : BloqueMovimiento
    + fabricaNoDibuja() : void
    + fabricaDibuja() : void
}


interface Bloque {
    + {abstract} ejecutar(unSectorDibujo : SectorDibujo) : void
    + {abstract} ejecutarInvertido(unSectorDibujo : SectorDibujo) : void
}

class Algoritmo {
    + agregar(unBloque : Bloque) : void
    + sacar(unBloque : Bloque) : void
    + ejecutar(unSectorDibujo : SectorDibujo) : void
}

interface AlgoritmoNoTieneBloquesError{}

interface RunTimeError

Algoritmo "1" o-- "0..*" Bloque
AlgoritmoNoTieneBloquesError  <--down Algoritmo
RunTimeError <|--right AlgoritmoNoTieneBloquesError
Interpretador <..right Algoritmo
Interpretador "1" o--down "1" FabricaDeBloques


@enduml


@startuml
hide circle
skinparam classAttributeIconSize 0
skinparam backgroundColor White
skinparam RoundCorner 10
skinparam Shadowing true

skinparam class {
    ArrowColor DarkBlue
    BackgroundColor LightBlue
    BorderColor DarkBlue
}

skinparam note {
    BackgroundColor LightYellow
    BorderColor DarkBlue
}

title Relacion entre Algoritmo y sus Observadores

class SectorAlgoritmoVista{
    - SectorDibujoVista : sectorDibujoVista

    +botoneraAccionesDisponibles (App aplicacion, Stage escenario)
    +actualizar() : void
}

class SectorBloquesDisponiblesVista{
    - ArrayList <BotonBloquePersonalizado> : botonesGuardados
    - Interpretador : interpretador

    + agregarBotonPersonalizado (BotonBloquePersonalizado botonPersonnalizado) : void
    + existeGuardadoConId (String bloqueId) : boolean
    + obtenerCopiaPorId(String bloqueId) : BotonBloquePersonalizado
    +actualizar() : void

}

class Algoritmo {
    + agregar(unBloque : Bloque) : void
    + sacar(unBloque : Bloque) : void
    + ejecutar(unSectorDibujo : SectorDibujo) : void
}

interface Observable{
    +agregarObservador(Observador : obs) : void
    +sacarObservador((Observador : obs) : void
    +notificarObservadores(): void
}

interface Observador{
    +actualizar() : void
}

Observable <|.. Algoritmo
Observable <..r Observador
Observador <|.. SectorAlgoritmoVista
Observador <|.. SectorBloquesDisponiblesVista
SectorAlgoritmoVista *-- SectorBloquesDisponiblesVista
SectorBloquesDisponiblesVista *--l Algoritmo
SectorAlgoritmoVista *-- Algoritmo

@enduml



----  --  ----  --  ----  --  ----  --  ----  --  ----  --  ----  --  ----  --  ----

@startuml
hide circle
skinparam classAttributeIconSize 0
skinparam backgroundColor White
skinparam RoundCorner 10
skinparam Shadowing true

skinparam class {
    ArrowColor DarkBlue
    BackgroundColor LightBlue
    BorderColor DarkBlue
}

skinparam note {
    BackgroundColor LightYellow
    BorderColor DarkBlue
}

title Diagrama de SectorDibujo

interface DibujoObservable{
    +agregarObservador(Observador : obs) : void
    +notificarObservadores(): void
}

interface ObservadorDibujo{
    +actualizar(Boolean : bool, Posicion : posicionInicial, Posicion : posicionFinal) : void
}

class SectorDibujo {
    - ultimaPosicion : Posicion
    + dibujar(direccion : Direccion) : void
    + existe(posicion : Posicion) : boolean
}

class Recorrido {
    + agregarArista(direccion : Direccion, ultimaPosicion : Posicion) : void
    + existeVertice(posicion : Posicion) : boolean
    + existeArista(origen : Posicion, destino : Posicion) : boolean
}

class Arista {
    + contiene(posicion : Posicion) : boolean
    + contiene(origen : Posicion, destino : Posicion) : boolean
}

class Posicion {
    - coordenadaX : int
    - coordenadaY : int
    + esIgual(posicion : Posicion) : boolean
    + actualizar(direccion : Direccion) : Posicion
}

class SectorDibujoVista{
    - DibujoVista : dibujo
    - SectorPersonaje : sectorPersonaje
    + borrarDibujo() : void

}

DibujoObservable <|..right SectorDibujo
DibujoObservable <.. ObservadorDibujo
SectorDibujo *-- Recorrido
Recorrido "1" *-- "1..*" Arista
Arista "1" *-- "2" Posicion
ObservadorDibujo <|..down SectorDibujoVista

@enduml

----  --  ----  --  ----  --  ----  --  ----  --  ----  --  ----  --  ----  --  ----

@startuml
hide circle
skinparam classAttributeIconSize 0
skinparam backgroundColor White
skinparam RoundCorner 10
skinparam Shadowing true
skinparam class {
    ArrowColor DarkBlue
    BackgroundColor LightBlue
    BorderColor DarkBlue
}
skinparam note {
    BackgroundColor LightYellow
    BorderColor DarkBlue
}

title Diagrama de clase de Bloque y BloqueMovimiento

interface Bloque {
    + {abstract} ejecutar(unSectorDibujo : SectorDibujo) : void
    + {abstract} ejecutarInvertido(unSectorDibujo : SectorDibujo) : void

}
class BloqueMovimiento {
    + BloqueMovimiento(direccion : Direccion, estado : Estado)
    + ejecutar(unSectorDibujo : SectorDibujo) : void
    + ejecutarInvertido(unSectorDibujo : SectorDibujo) : void
}
interface Estado {
    + {abstract} ejecutar(unSectorDibujo : SectorDibujo, direccion : Direccion)
}
class Dibuja {
    + ejecutar(unSectorDibujo : SectorDibujo, direccion : Direccion)
}
class NoDibuja {
    + ejecutar(unSectorDibujo : SectorDibujo, direccion : Direccion)
}
abstract class Direccion {
    + actualizarPosicion(posicion : Posicion) : Posicion
    + {abstract} invertir() : Direccion
}
class Norte {
    + invertir() : Sur
}
class Sur {
    + invertir() : Norte
}
class Este {
    + invertir() : Oeste
}
class Oeste {
    + invertir() : Este
}

Bloque <|.. BloqueMovimiento
BloqueMovimiento *-- Estado
Estado <|.. Dibuja
Estado <|.. NoDibuja
BloqueMovimiento *--right Direccion
Direccion <|-- Norte
Direccion <|-- Sur
Direccion <|-- Este
Direccion <|-- Oeste
@enduml

----  --  ----  --  ----  --  ----  --  ----  --  ----  --  ----  --  ----  --  ----

@startuml
hide circle
skinparam classAttributeIconSize 0
skinparam backgroundColor White
skinparam RoundCorner 10
skinparam Shadowing true
skinparam class {
    ArrowColor DarkBlue
    BackgroundColor LightBlue
    BorderColor DarkBlue
}
skinparam note {
    BackgroundColor LightYellow
    BorderColor DarkBlue
}

title Diagrama de clase de Bloque y bloques especiales

interface BloquePersonalizadoNoPuedeEjecutarseSinBloquesError{}

interface RunTimeError{}

interface Bloque {
    + {abstract} ejecutar(unSectorDibujo : SectorDibujo) : void
    + {abstract} ejecutarInvertido(unSectorDibujo : SectorDibujo) : void

}
class BloqueMovimiento {
    + BloqueMovimiento(direccion : Direccion)
    + ejecutar(unSectorDibujo : SectorDibujo) : void
    + ejecutarInvertido(unSectorDibujo : SectorDibujo) : void
}
interface Bloques {
    + {abstract} agregar(unBloque : bloque) : void
    + {abstract} sacar(unBloque : bloque) : void
}
class BloquePersonalizado {
    + ejecutar(unSectorDibujo : SectorDibujo) : void
    + ejecutarInvertido(unSectorDibujo : SectorDibujo) : void
    + agregar(unBloque : bloque) : void
    + sacar(unBloque : bloque) : void
}
class RepetirDoble {
    + ejecutar(unSectorDibujo : SectorDibujo) : void
    + ejecutarInvertido(unSectorDibujo : SectorDibujo) : void
    + agregar(unBloque : bloque) : void
    + sacar(unBloque : bloque) : void
}
class RepetirTriple {
    + ejecutar(unSectorDibujo : SectorDibujo) : void
    + ejecutarInvertido(unSectorDibujo : SectorDibujo) : void
    + agregar(unBloque : bloque) : void
    + sacar(unBloque : bloque) : void
}
class Invertir {
    + ejecutar(unSectorDibujo : SectorDibujo) : void
    + ejecutarInvertido(unSectorDibujo : SectorDibujo) : void
    + agregar(unBloque : bloque) : void
    + sacar(unBloque : bloque) : void
}
class DecoratorBloquePersonalizadoBase {
    + ejecutar(unSectorDibujo : SectorDibujo) : void
    + ejecutarInvertido(unSectorDibujo : SectorDibujo) : void
    + agregar(unBloque : bloque) : void
    + sacar(unBloque : bloque) : void
}

Bloque <|.. Bloques
Bloques "1" *--left "1..*" Bloque
Bloques <|..right BloquePersonalizado
Bloques <|.. DecoratorBloquePersonalizadoBase
DecoratorBloquePersonalizadoBase o-- Bloques
DecoratorBloquePersonalizadoBase <|-- RepetirDoble
DecoratorBloquePersonalizadoBase <|-- RepetirTriple
DecoratorBloquePersonalizadoBase <|-- Invertir
Bloque <|.. BloqueMovimiento
BloquePersonalizadoNoPuedeEjecutarseSinBloquesError <--up BloquePersonalizado
RunTimeError <|--up BloquePersonalizadoNoPuedeEjecutarseSinBloquesError
@enduml